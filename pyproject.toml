[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "django-auth-style"
description = "Django template styling for django-allauth and django-oauth-toolkit."
readme = "README.md"
requires-python = ">=3.10"
license = "Apache-2.0"
license-files = ["LICENSE"]
maintainers = [{name = "Kitware, Inc.", email = "kitware@kitware.com"}]
keywords=[
  "django",
  "resonant",
  "kitware-resonant",
  "style",
  "styling",
  "allauth",
  "django-allauth",
  "django-oauth-toolkit"
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "Framework :: Django :: 4",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5",
  "Framework :: Django :: 5.1",
  "Framework :: Django :: 5.2",
  "Framework :: Django",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python",
]
dependencies = [
  "django>=4.2",
]
dynamic = ["version"]

[project.urls]
Repository = "https://github.com/kitware-resonant/django-auth-style"
"Bug Reports" = "https://github.com/kitware-resonant/django-auth-style/issues"

[project.optional-dependencies]
allauth = [
  # Required for "elements/p.html" template
  "django-allauth>=0.63",
]
oauth-toolkit = [
  "django-oauth-toolkit",
]

[dependency-groups]
dev = [
  "django",
  "django-allauth[mfa,socialaccount]",
  "django-browser-reload",
  "django-debug-toolbar",
  "django-oauth-toolkit",
  "pywatchman",
  "tox",
  "tox-uv",
]
lint = [
  "flake8",
  "flake8-black",
  "flake8-bugbear",
  "flake8-docstrings",
  "flake8-isort",
  "pep8-naming",
]
format = [
  "black",
  "isort",
]
type = [
  "django-stubs",
]
test = [
  "django-allauth[mfa,socialaccount]",
  "django-coverage-plugin",
  "pytest",
  "pytest-cov",
  "pytest-django",
  "pytest-mock",
  "pytest-playwright",
  "pytest-playwright-visual",
]

[tool.hatch.build]
only-include = [
  "auth_style",
]
artifacts = [
  "auth_style/static/auth_style/dist",
]

[tool.hatch.build.hooks.jupyter-builder]
dependencies = ["hatch-jupyter-builder"]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = [
  "auth_style/static/auth_style/dist/styles.css",
  "auth_style/static/auth_style/dist/icons.css",
]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
build_cmd = "build"
source_dir = "npm-src"
build_dir = "auth_style/static/auth_style/dist"

[tool.hatch.version]
source = "vcs"

[tool.black]
line-length = 100
target-version = ["py313"]

[tool.coverage.run]
source_pkgs = [
  "auth_style",
  # django_coverage_plugin hooks into "django.template" to do its work; since we're only
  # whitelisting select packages for coverage tracking, this must be among them
  "django.template",
]
plugins = [
  "django_coverage_plugin",
]

[tool.coverage.report]
omit = [
  # Don't actually report coverage from "django.template" itself
  "**/site-packages/django/template/**",
]

[tool.coverage.paths]
source = [
  "auth_style/",
  ".tox/**/site-packages/auth_style/",
]

[tool.isort]
profile = "black"
line_length = 100
# Sort by name, don't cluster "from" vs "import"
force_sort_within_sections = true
# Combines "as" imports on the same line
combine_as_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
# Allow test_app to be imported without adding the root directory to the pythonpath,
# which would cause the local "auth_style" module to shadow the install.
pythonpath = ["tests"]
# Configure pythonpath ourselves, not based on manage.py
django_find_project = false
addopts = [
  # Use the Pytest-reccomended "importlib" mode
  "--import-mode=importlib",
  "--strict-config",
  "--strict-markers",
  "--showlocals",
  "--verbose",
  "--cov",
]
filterwarnings = [
  "error",
  # pytest often causes unclosed socket warnings
  'ignore:unclosed <socket\.socket:ResourceWarning',
]
DJANGO_SETTINGS_MODULE = "test_app.settings"
